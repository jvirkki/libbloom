From ac0a990f6d4fd4d07539632297677aeee46da61c Mon Sep 17 00:00:00 2001
From: m0nkeyc0der <noface@inbox.ru>
Date: Sun, 6 Sep 2015 14:14:29 +0300
Subject: [PATCH] Group bloom filter bits into CPU L1 cache sized buckets
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Profit from using L1 cache sized buckets comparing with
the previous version was detected as 2.5X better CPU time for larger sized
bloom filter via measuring 'perf test-libbloom -p 10000000 10000000' as

      16948,503759 task-clock                #    0,994 CPUs utilized
               105 context-switches          #    0,006 K/sec
                20 cpu-migrations            #    0,001 K/sec
             4 554 page-faults               #    0,269 K/sec
    21 837 781 847 cycles                    #    1,288 GHz                     [49,99%]
       466 360 932 stalled-cycles-frontend   #    2,14% frontend cycles idle    [50,00%]
    15 421 088 731 stalled-cycles-backend    #   70,62% backend  cycles idle    [50,00%]
     3 574 470 406 instructions              #    0,16  insns per cycle
                                             #    4,31  stalled cycles per insn [50,01%]
       437 580 007 branches                  #   25,818 M/sec                   [50,00%]
        44 056 168 branch-misses             #   10,07% of all branches         [50,00%]

      17,046271205 seconds time elapsed

vs

       6726,763600 task-clock                #    0,986 CPUs utilized
               108 context-switches          #    0,016 K/sec
                10 cpu-migrations            #    0,001 K/sec
             8 970 page-faults               #    0,001 M/sec
     8 651 681 442 cycles                    #    1,286 GHz                     [50,00%]
       437 690 472 stalled-cycles-frontend   #    5,06% frontend cycles idle    [50,02%]
     5 939 352 037 stalled-cycles-backend    #   68,65% backend  cycles idle    [50,02%]
     3 405 553 987 instructions              #    0,39  insns per cycle
                                             #    1,74  stalled cycles per insn [50,01%]
       437 514 925 branches                  #   65,041 M/sec                   [49,98%]
        44 079 507 branch-misses             #   10,07% of all branches         [50,00%]

       6,822668794 seconds time elapsed

where CPU is

	Architecture:          x86_64
	CPU op-mode(s):        32-bit, 64-bit
	Byte Order:            Little Endian
	CPU(s):                2
	On-line CPU(s) list:   0,1
	Thread(s) per core:    1
	Core(s) per socket:    2
	Socket(s):             1
	NUMA node(s):          1
	Vendor ID:             AuthenticAMD
	CPU family:            16
	Model:                 6
	Stepping:              3
	CPU MHz:               1296.694
	BogoMIPS:              2593.38
	Virtualization:        AMD-V
	L1d cache:             64K
	L1i cache:             64K
	L2 cache:              1024K
	NUMA node0 CPU(s):     0,1
---
 Makefile |   2 +-
 bloom.c  | 134 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 bloom.h  |  17 ++++++++
 3 files changed, 150 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index 296fa85..3bb0df7 100644
--- a/Makefile
+++ b/Makefile
@@ -26,7 +26,7 @@ BUILD_OS := $(shell uname)
 BUILD=$(TOP)/build
 INC=-I$(TOP) -I$(TOP)/murmur2
 LIB=-lm
-CC=gcc -Wall ${OPT} ${MM} -std=c99 -fPIC
+CC=gcc -Wall ${OPT} ${MM} -std=c99 -D_GNU_SOURCE -fPIC
 
 ifeq ($(MM),)
 MM=-m32
diff --git a/bloom.c b/bloom.c
index d5c3869..7cabedd 100644
--- a/bloom.c
+++ b/bloom.c
@@ -9,6 +9,7 @@
  * Refer to bloom.h for documentation on the public interfaces.
  */
 
+#include <assert.h>
 #include <fcntl.h>
 #include <math.h>
 #include <stdint.h>
@@ -55,9 +56,12 @@ static int bloom_check_add(struct bloom * bloom,
   register unsigned int x;
   register unsigned int i;
 
+  unsigned       bucket_index = (a % bloom->buckets);
+  unsigned char *bucket_ptr   = (bloom->bf + (bucket_index << bloom->bucket_bytes_exponent));
+
   for (i = 0; i < bloom->hashes; i++) {
-    x = (a + i*b) % bloom->bits;
-    if (test_bit_set_bit(bloom->bf, x, add))
+    x = (a + i*b) & bloom->bucket_bits_fast_mod_operand;
+    if (test_bit_set_bit(bucket_ptr, x, add))
         hits++;
   }
 
@@ -69,6 +73,126 @@ static int bloom_check_add(struct bloom * bloom,
 }
 
 
+/**
+ * gets file 1st line (w/o new line character)
+ */
+static const char* get_file_content(int dir, const char* file)
+{
+  static char buf[128];
+  FILE *fp;
+  int fd = openat(dir, file, O_RDONLY);
+  if (fd < 0)
+    return NULL;
+
+  fp = fdopen(fd, "r");
+  int ok = fscanf(fp, "%127s", buf);
+  fclose(fp); // this also closes fd
+
+  return ok? buf : NULL;
+}
+
+
+static int apply_size_suffix(int val, char suffix, const char* errmsg)
+{
+  switch (suffix) {
+  case 'K':
+    return val * 1024;
+  case 'M':
+    return val * 1024*1024;
+  default:
+    printf("%s: Unknown suffix '%c'\n", errmsg, suffix);
+    return -1;
+  }
+}
+
+
+static unsigned make_log2_friendly(unsigned cache_size)
+{
+  return 1 << (int)log2(cache_size);
+}
+
+
+static unsigned detect_bucket_size(unsigned fallback_size)
+{
+  int dir;
+  const char *s;
+  char size_suffix;
+  static int bucket_size = 0;
+  if (bucket_size)
+    return bucket_size > 0 ? (bucket_size / BLOOM_L1_CACHE_SIZE_DIV) : fallback_size;
+
+  dir = open("/sys/devices/system/cpu/cpu0/cache/index0", O_DIRECTORY);
+  if (dir < 0)
+  {
+    // sorry, this works for Linux only
+    bucket_size = -1;
+    return fallback_size;
+  }
+
+  // Double check cache is L1
+  if (!(s = get_file_content(dir, "level")) || strcmp(s, "1") != 0)
+  {
+    printf("Cannot detect L1 cache size in %s:%d\n", __FILE__, __LINE__);
+    goto out_err;
+  }
+
+  // Double check cache type is "Data"
+  if (!(s = get_file_content(dir, "type")) || strcmp(s, "Data") != 0)
+  {
+    printf("Cannot detect L1 cache size in %s:%d\n", __FILE__, __LINE__);
+    goto out_err;
+  }
+
+  // Fetch L1 cache size
+  if (!(s = get_file_content(dir, "size")) || sscanf(s, "%d%c%c", &bucket_size, &size_suffix, &size_suffix) != 2)
+  {
+    printf("Cannot detect L1 cache size in %s:%d\n", __FILE__, __LINE__);
+    goto out_err;
+  }
+
+  bucket_size = apply_size_suffix(bucket_size, size_suffix, "Cannot detect L1 cache size");
+  if (bucket_size < 0)
+    goto out_err;
+
+  bucket_size  = make_log2_friendly(bucket_size);
+  bucket_size /= BLOOM_L1_CACHE_SIZE_DIV;
+
+  close(dir);
+  return bucket_size;
+
+out_err:
+  bucket_size = -1;
+  close(dir);
+  return fallback_size;
+}
+
+
+static void setup_buckets(struct bloom * bloom)
+{
+  const unsigned cache_size = detect_bucket_size(BLOOM_BUCKET_SIZE_FALLBACK);
+
+  bloom->buckets      = (bloom->bytes / cache_size);
+  bloom->bucket_bytes = cache_size;
+
+  // make sure bloom buffer bytes and bucket_bytes are even
+  int not_even_by = (bloom->bytes % bloom->bucket_bytes);
+  if (not_even_by)
+  {
+    // adjust bytes
+    bloom->bytes += (bloom->bucket_bytes - not_even_by);
+    assert((bloom->bytes % bloom->bucket_bytes) == 0 || !"Oops! Should get even");
+    // adjust bits
+    bloom->bits = bloom->bytes * 8;
+    // adjust bits per element
+    bloom->bpe = bloom->bits*1. / bloom->entries;
+    // adjust buckets
+    bloom->buckets++;
+  }
+
+  bloom->bucket_bytes_exponent        = __builtin_ctz(cache_size);
+  bloom->bucket_bits_fast_mod_operand = (cache_size * 8 - 1);
+}
+
 int bloom_init(struct bloom * bloom, int entries, double error)
 {
   bloom->ready = 0;
@@ -95,6 +219,8 @@ int bloom_init(struct bloom * bloom, int entries, double error)
 
   bloom->hashes = (int)ceil(0.693147180559945 * bloom->bpe);  // ln(2)
 
+  setup_buckets(bloom);
+
   bloom->bf = (unsigned char *)calloc(bloom->bytes, sizeof(unsigned char));
   if (bloom->bf == NULL) {
     return 1;
@@ -125,6 +251,10 @@ void bloom_print(struct bloom * bloom)
   (void)printf(" ->bits = %d\n", bloom->bits);
   (void)printf(" ->bits per elem = %f\n", bloom->bpe);
   (void)printf(" ->bytes = %d\n", bloom->bytes);
+  (void)printf(" ->buckets = %u\n", bloom->buckets);
+  (void)printf(" ->bucket_bytes = %u\n", bloom->bucket_bytes);
+  (void)printf(" ->bucket_bytes_exponent = %u\n", bloom->bucket_bytes_exponent);
+  (void)printf(" ->bucket_bits_fast_mod_operand = 0%o\n", bloom->bucket_bits_fast_mod_operand);
   (void)printf(" ->hash functions = %d\n", bloom->hashes);
 }
 
diff --git a/bloom.h b/bloom.h
index 2ca87ce..48ad04c 100644
--- a/bloom.h
+++ b/bloom.h
@@ -8,6 +8,17 @@
 #ifndef _BLOOM_H
 #define _BLOOM_H
 
+#define BLOOM_BUCKET_SIZE_FALLBACK (8 * 1024)
+
+/**
+ * It was found that using multiplier x0.5
+ * for CPU L1 cache size is more effective
+ * in terms of CPU usage and, surprisingly, collisions number.
+ *
+ * Feel free to tune this constant the way it will work for you.
+ */
+#define BLOOM_L1_CACHE_SIZE_DIV 1
+
 /** ***************************************************************************
  * Structure to keep track of one bloom filter.  Caller needs to
  * allocate this and pass it to the functions below. First call for
@@ -28,6 +39,12 @@ struct bloom
   // Fields below are private to the implementation. These may go away or
   // change incompatibly at any moment. Client code MUST NOT access or rely
   // on these.
+  unsigned buckets;
+  unsigned bucket_bytes;
+  // x86 CPU divide by/multiply by operation optimization helpers
+  unsigned bucket_bytes_exponent;
+  unsigned bucket_bits_fast_mod_operand;
+
   double bpe;
   unsigned char * bf;
   int ready;
-- 
2.1.4

